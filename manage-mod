#!/usr/bin/env perl

## no critic

use strict;
use warnings;

BEGIN {
  use FindBin qw( $RealBin $RealScript );
  use File::Basename;

  $ENV{MANAGE_MOD_VERSION}  = '0.01';
  $ENV{MANAGE_MOD_BASENAME} = basename( $RealScript );
  $ENV{MANAGE_MOD_CACHE_DIR} //= "$ENV{HOME}/.cache/$ENV{MANAGE_MOD_BASENAME}";
  $ENV{MANAGE_MOD_AGENT}     //= "HarleyPig's Mod Manager/$ENV{MANAGE_MOD_VERSION}";

  [ [ -d $ENV{MANAGE_MOD_CACHE_DIR} ] ]
    or mkdir $ENV{MANAGE_MOD_CACHE_DIR}
    or die "Unable to create cache dir.";
}

use lib "$RealBin/lib";

use Carp;
use Log::Any::Adapter;
use ManageMod::CurseForge::GetModInfo;
use ManageMod::GetData;
use YAML::Syck;

#-----------------------------------------------------------------------------
#Log::Any::Adapter->set( 'File', "$HOME/.local/$ENV{BASENAME}" );
Log::Any::Adapter->set( 'File', "$ENV{MANAGE_MOD_BASENAME}.log", log_level => 'debug' );

#-----------------------------------------------------------------------------
sub get_jar_file {
  my ( $mod, $version, $channels ) = @_;

  my $data = get_mod_info( $mod, $version, $channels );

  croak unless exists $data->{download};

  my $download_url = $data->{download}{download_url};
  my $md5sum       = $data->{download}{md5sum};

  my $local_file = "$local_file_cache/$data->{download}{filename}";

  get_file( $download_url, $local_file, $md5sum )
    or croak "Couldn't get $data->{download}{filename}";

  for my $depmod ( @{ $data->{dependencies} } ) {
    get_mod( $depmod, $version, $channels );
  }

  return $data;
} ## end sub get_mod

#-----------------------------------------------------------------------------

#my $mod      = 'dynamic-surroundings';
my $mod      = 'streams';
my $ver      = '1.12.2';
my $channels = 'release,beta';

#my $data = get_mod( $mod, $ver, $channels );
my $data = get_mod_info( $mod, $version, $channels );

  croak unless exists $data->{download};

  my $download_url = $data->{download}{download_url};
  my $md5sum       = $data->{download}{md5sum};

  my $local_file = "$local_file_cache/$data->{download}{filename}";


use YAML::Syck;
DumpFile('./dump.yaml', $data);
