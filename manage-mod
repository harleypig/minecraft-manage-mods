#!/usr/bin/env perl

## no critic

use strictures 2;

# XXX: create main ManageMod module and do most of the setup there.
# XXX: Move config to ManageMod::Config
# XXX: Allow for include config (have a global modules config, groupings of mod types, etc.)
# XXX: App::CLI::Plugin::ParallelForkManager
# XXX: Add option to mark a mod as 'already tried, won't use'
# XXX: Allow for option to updated cache without updating links
# XXX: Add command line options:
#        add/update (subtypes, resourcepacks, shaders, etc.),
#        list
#        ???
# XXX: add options for settings (see option* in minecraft instance base folder)
# XXX: https://stackoverflow.com/questions/1183876/what-are-the-best-practices-for-implementing-a-cli-tool-in-perl
# XXX: http://catb.org/esr/writings/taoup/html/ch11s06.html

BEGIN {
  use FindBin qw( $RealBin $RealScript );
  use File::Basename;

  $ENV{MANAGE_MOD_VERSION}  = '0.01';
  $ENV{MANAGE_MOD_BASENAME} = basename( $RealScript );
  $ENV{MANAGE_MOD_CACHE_DIR} //= "$ENV{HOME}/.cache/$ENV{MANAGE_MOD_BASENAME}";
  $ENV{MANAGE_MOD_AGENT}     //= "HarleyPig's Mod Manager/$ENV{MANAGE_MOD_VERSION}";

  [ [ -d $ENV{MANAGE_MOD_CACHE_DIR} ] ]
    or mkdir $ENV{MANAGE_MOD_CACHE_DIR}
    or die "Unable to create cache dir.";
}

use lib "$RealBin/lib";

use ManageMod::CurseForge;
use YAML::Syck;

#-----------------------------------------------------------------------------
use Log::Any::Adapter;
use Log::Any '$log';

my $LogFile = "$ENV{MANAGE_MOD_CACHE_DIR}/$ENV{MANAGE_MOD_BASENAME}.log";
Log::Any::Adapter->set( 'File', "$LogFile", log_level => 'debug' );

#-----------------------------------------------------------------------------
my $config;

#-----------------------------------------------------------------------------
# Get jarfile and link it.

my @wanted = qw( filename filesize md5sum );

sub link_jar {
  my ( $mod ) = @_;

  my $data = get_mod_data( $mod, $config->{mcversion}, $config->{channels} );
  $config->{mods}{$mod}{$_} = $data->{download}{$_} for @wanted;

  my $target = "$config->{directory}/mods/$config->{mods}{$mod}{filename}";
  my $source = $data->{download}{local_url};

  if ( -e $target ) {
    if ( -l $target ) {
      my $resolved = readlink $target;

      die $log->fatalf( '%s is a symlink, but does not point to our cached file' )
        unless $source eq $resolved;

      unlink $target;

      die $log->fatalf( 'could not create symbolic link for %s', $mod )
        unless symlink $source, $target;

    } else {
      die $log->fatalf( '%s exists and is not a symlinked file', $mod );

    }
  } else {
    die $log->fatalf( 'could not create symbolic link for %s (%s -> %s)', $mod, $target, $source )
      unless symlink $source, $target;
  }

  if ( @{ $data->{dependencies} } ) {
    my $d = $config->{mods}{$mod}{dependencies} = $data->{dependencies};
    link_jar( $_ ) for @$d;
  }
} ## end sub link_jar

#-----------------------------------------------------------------------------
#my $config_file = './mods.cfg';
#my $config_file = './test-single-mods.cfg';
#my $config_file = './test-multiple-mods.cfg';
my $config_file = './mymods.cfg';
#my $config_file = './open-terrain-generator.cfg';
#my $config_file = './terrarium.cfg';
$config = LoadFile( $config_file );

my @expected_config = qw( mcversion channels directory mods );

my @missing;

for my $c ( @expected_config ) {
  push @missing, $c
    unless exists $config->{$c};
}

die $log->fatalf( 'no %s found in %s', do { join ', ', @missing }, $config_file )
  if @missing;

die $log->fatalf( 'directory %s does not exist or is not accessible', $config->{directory} )
  unless -r $config->{directory};

die $log->fatalf( 'mods entry must be a hashref' )
  unless ref $config->{mods} eq 'HASH';

#-----------------------------------------------------------------------------
link_jar( $_ ) for keys %{ $config->{mods} };

DumpFile( $config_file, $config );
